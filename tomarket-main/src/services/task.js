import colors from "colors";
import dayjs from "dayjs";
import delayHelper from "../helpers/delay.js";
import generatorHelper from "../helpers/generator.js";
import logHelper from "../helpers/log.js";
import httpService from "./http.js";

class TaskService {
  constructor() {
    this.gameId = {
      daily: "fa873d13-d831-4d6f-8aee-9cff7a1d0db1",
      drop: "59bcd12e-04e2-404c-a172-311a0084587d",
      farm: "53b22103-c7ff-413d-bc63-20f6fb806a07",
    };
  }

  async runTask(info, token, dataUser, ip) {
    const timestamp = info.timestamp;
    let playPasses = info.play_passes;
    const currentDatetime = dayjs.unix(timestamp);

    const lastCheckin = dayjs.unix(info.daily?.last_check_ts).add(8, "hour");

    const canClaim =
      lastCheckin.isBefore(currentDatetime, "day") &&
      currentDatetime.hour() >= 7;

    // Ch·∫°y ƒëi·ªÉm danh h√†ng ng√†y
    if (!info?.daily || canClaim) {
      await this.dailyClaim(token, dataUser, ip);
    }

    // Ki·ªÉm tra xem c√≥ bƒÉt ƒë·∫ßu farm ch∆∞a?
    if (!info.farming) {
      await this.startFarming(token, dataUser, ip);
    } else if (timestamp > info.farming.end_at) {
      // Thu ho·∫°ch c√† chua
      await this.endFarming(token, dataUser, ip);
    } else {
      const end = dayjs.unix(info.farming.end_at);
      const difference = end.diff(currentDatetime, "minute");
      logHelper.log(
        `Thu ho·∫°ch sau: ${colors.green(difference + " ph√∫t")}`,
        dataUser,
        ip
      );
    }

    // Ch∆°i game
    logHelper.log(
      `L∆∞·ª£t ch∆°i game c√≤n l·∫°i: ${colors.green(playPasses)}`,
      dataUser,
      ip
    );
    if (playPasses > 0) {
      for (let index = 0; index < 9999 && playPasses > 0; index++) {
        playPasses--;
        const statusPlay = await this.playGame(token, dataUser, ip);
        if (!statusPlay) return;
        const msgDelay = colors.yellow(
          `C·∫ßn ch·ªù 30s tr∆∞·ªõc khi ho√†n th√†nh ch∆°i game.......`
        );
        await delayHelper.delay(30, msgDelay, dataUser, ip);
        await this.claimGame(token, dataUser, ip);
      }
    }
    const reStartAfter = generatorHelper.randomInt(10, 13);
    return reStartAfter;
  }

  async dailyClaim(token, dataUser, ip) {
    try {
      const body = {
        game_id: this.gameId.daily,
      };
      const response = await httpService.post(
        "daily/claim",
        body,
        token,
        ip ? dataUser.proxy : null
      );
      const data = response.data.data;
      const point = data.today_points;
      logHelper.log(
        `ƒêi·ªÉm danh th√†nh c√¥ng, ph·∫ßn th∆∞·ªüng: ${colors.green(point)} c√† chua üçÖ`,
        dataUser,
        ip
      );
    } catch (error) {
      logHelper.logError(
        `Kh√¥ng th·ªÉ ƒëi·ªÉm danh h√†ng ng√†y - L·ªói: ${error.message}`,
        dataUser,
        ip
      );
    }
  }

  async startFarming(token, dataUser, ip) {
    try {
      const body = {
        game_id: this.gameId.farm,
      };
      const response = await httpService.post(
        "farm/start",
        body,
        token,
        ip ? dataUser.proxy : null
      );
      const data = response.data.data;
      const start = dayjs.unix(data.start_at);
      const end = dayjs.unix(data.end_at);
      const difference = end.diff(start, "minute");
      logHelper.log(
        `B·∫Øt ƒë·∫ßu farming....... Thu ho·∫°ch sau: ${colors.green(
          difference + " ph√∫t"
        )}`,
        dataUser,
        ip
      );
    } catch (error) {
      logHelper.logError(
        `Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu farming - L·ªói: ${error.message}`,
        dataUser,
        ip
      );
    }
  }

  async endFarming(token, dataUser, ip) {
    try {
      const body = {
        game_id: this.gameId.farm,
      };
      const response = await httpService.post(
        "farm/claim",
        body,
        token,
        ip ? dataUser.proxy : null
      );
      const data = response.data.data;
      const point = data.claim_this_time;
      logHelper.log(
        `Thu ho·∫°ch th√†nh c√¥ng, ph·∫ßn th∆∞·ªüng: ${colors.green(point)} c√† chua üçÖ`,
        dataUser,
        ip
      );
      await this.startFarming(token, dataUser, ip);
    } catch (error) {
      logHelper.logError(
        `Kh√¥ng th·ªÉ thu ho·∫°ch - L·ªói: ${error.message}`,
        dataUser,
        ip
      );
    }
  }

  async playGame(token, dataUser, ip) {
    try {
      const body = {
        game_id: this.gameId.drop,
      };
      const response = await httpService.post(
        "game/play",
        body,
        token,
        ip ? dataUser.proxy : null
      );
      const data = response.data.data;
      logHelper.logSuccess("B·∫Øt ƒë·∫ßu ch∆°i game.....", dataUser, ip);
      return true;
    } catch (error) {
      logHelper.logError(
        `Kh√¥ng th·ªÉ ch∆°i game - L·ªói: ${error.message}`,
        dataUser,
        ip
      );
      return false;
    }
  }

  async claimGame(token, dataUser, ip) {
    try {
      const points = generatorHelper.randomInt(370, 450);
      const body = {
        game_id: this.gameId.drop,
        points,
      };
      const response = await httpService.post(
        "game/claim",
        body,
        token,
        ip ? dataUser.proxy : null
      );
      const data = response.data.data;
      logHelper.log(
        `Ch∆°i game ho√†n t·∫•t, ph·∫ßn th∆∞·ªüng: ${colors.green(points)} c√† chua üçÖ`,
        dataUser,
        ip
      );
    } catch (error) {
      logHelper.logError(
        `Ch∆°i game th·∫•t b·∫°i - L·ªói: ${error.message}`,
        dataUser,
        ip
      );
    }
  }
}

const taskService = new TaskService();
export default taskService;
